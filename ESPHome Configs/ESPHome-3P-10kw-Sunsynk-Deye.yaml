#
#. modified for 3PH 10kw Deye Hybrid 
#
substitutions:
  settings_skipped_updates: "30"
  devicename: "deye-logger"
  device_description: "Inverter RS485 Logger"
  friendly_name: "SunSynk"

esphome:
  name: $devicename
  comment: '${device_description}'
  
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable webserver
web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password
  version: 2
  log: false
  ota: false

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: **********************************************


ota:
  password: !secret ota_password_sunsynk
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${devicename}'
    password: !secret fallback_password

  fast_connect: true
  power_save_mode: none

captive_portal:

# Enable time component to reset energy at midnight
# https://esphome.io/components/time.html#home-assistant-time-source
time:
  - platform: homeassistant
    id: homeassistant_time
     
uart:
  id: mod_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  stop_bits: 1
 
modbus:
  id: inverter_modbus
  flow_control_pin: GPIO4
 
modbus_controller:
  - id: inverter
    address: 0x01
    modbus_id: inverter_modbus
    setup_priority: -10
    update_interval: "10s"
    command_throttle: "50ms"


######################################################################################################
binary_sensor:  
  - platform: modbus_controller            # 552 Grid Connected Status
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Connected Status"
    id: inverter_esphome_grid_connected_status
    register_type: holding
    address: 552

#                                               SENSORS                                               #
#######################################################################################################

############################################### BATTERY ###############################################
sensor:
  - platform: modbus_controller            # 586 Battery Temperature
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Temperature"
    id: inverter_esphome_battery_temperature
    register_type: holding
    address: 586
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: U_WORD 
    filters:
      - offset: -1000
      - multiply: 0.1

  - platform: modbus_controller            # 587 Battery Voltage
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Voltage"
    id: inverter_esphome_battery_voltage
    register_type: holding
    address: 587
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    filters:
      - multiply: 0.01
    value_type: U_WORD

  - platform: modbus_controller            # 588 Battery SOC
    modbus_controller_id: inverter
    name: "${friendly_name} Battery SOC"
    id: inverter_esphome_battery_soc
    register_type: holding
    address: 588
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    value_type: U_WORD

  - platform: modbus_controller            # 590 Battery Power
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Power"
    id: inverter_esphome_battery_power
    register_type: holding
    address: 590
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # Battery Power Charge only needed if you want to calculate Daily Energy Totals using ESPHome
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Power Charge"
    id: inverter_esphome_battery_power_charge
    register_type: holding
    address: 590
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD
    internal: true
    lambda: |-
      if (x > 0) return 0; else return x *-1;

  - platform: modbus_controller            # Battery Power DisCharge only needed if you want to calculate Daily Energy Totals using ESPHome
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Power Discharge"
    id: inverter_esphome_battery_power_discharge
    register_type: holding
    address: 590
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD
    internal: true
    lambda: |-
      if (x < 0) return 0; else return x;

######################################################################################################

  - platform: modbus_controller            # 591 Battery Current
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Current"
    id: inverter_esphome_battery_current
    register_type: holding
    address: 591
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 212 Battery Charge Limit Current
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Charge Limit Current"
    id: inverter_esphome_battery_charge_limit_current
    register_type: holding
    address: 212
    unit_of_measurement: "A"
    accuracy_decimals: 0
    device_class: current
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 213 Battery Discharge Limit Current
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Discharge Limit Current"
    id: inverter_esphome_battery_discharge_limit_current
    register_type: holding
    address: 213
    unit_of_measurement: "A"
    accuracy_decimals: 0
    device_class: current
    state_class: measurement
    value_type: S_WORD

# Battery capacity (if managed by BMS)

  - platform: modbus_controller            # 115 Battery Capacity Shutdown
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Capacity Shutdown"
    id: inverter_esphome_battery_capacity_shutdown
    register_type: holding
    address: 115
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    value_type: S_WORD

  - platform: modbus_controller            # 116 Battery Restart Capacity
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Restart Capacity"
    id: inverter_esphome_battery_restart_capacity
    register_type: holding
    address: 116
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    value_type: S_WORD

  - platform: modbus_controller            # 117 Battery Low Capacity
    modbus_controller_id: inverter
    name: "${friendly_name} Battery Low Capacity"
    id: inverter_esphome_battery_low_capacity
    register_type: holding
    address: 117
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    value_type: S_WORD



############################################### INVERTER ##############################################

  - platform: modbus_controller            # 636 Inverter Power
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Power"
    id: inverter_esphome_inverter_power
    register_type: holding
    address: 636
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 633 Inverter L1 Power
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter L1 Power"
    id: inverter_esphome_inverter_L1_power
    register_type: holding
    address: 633
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    value_type: S_WORD
    
  - platform: modbus_controller            # 634 Inverter L2 Power
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter L2 Power"
    id: inverter_esphome_inverter_L2_power
    register_type: holding
    address: 634
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    value_type: S_WORD
    
  - platform: modbus_controller            # 635 Inverter L3 Power
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter L3 Power"
    id: inverter_esphome_inverter_L3_power
    register_type: holding
    address: 635
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    value_type: S_WORD


  - platform: modbus_controller            # 627 Inverter L1 Voltage
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Voltage L1"
    id: inverter_esphome_inverter_voltage_L1
    register_type: holding
    address: 627
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    filters:
      - multiply: 0.1
    value_type: U_WORD 

  - platform: modbus_controller            # 628 Inverter L2 Voltage
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Voltage L2"
    id: inverter_esphome_inverter_voltage_L2
    register_type: holding
    address: 628
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    filters:
      - multiply: 0.1
    value_type: U_WORD 

  - platform: modbus_controller            # 629 Inverter L3 Voltage
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Voltage L3"
    id: inverter_esphome_inverter_voltage_L3
    register_type: holding
    address: 629
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    filters:
      - multiply: 0.1
    value_type: U_WORD 


  - platform: modbus_controller            # 630 Inverter Current L1
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Current L1"
    id: inverter_esphome_inverter_current_L1
    register_type: holding
    address: 630
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 631 Inverter Current L2
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Current L2"
    id: inverter_esphome_inverter_current_L2
    register_type: holding
    address: 631
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 632 Inverter Current L3
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Current L3"
    id: inverter_esphome_inverter_current_L3
    register_type: holding
    address: 632
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01


  - platform: modbus_controller            # 638 Inverter Frequency
    modbus_controller_id: inverter
    name: "${friendly_name} Inverter Frequency"
    id: inverter_esphome_inverter_frequency
    register_type: holding
    address: 638
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    value_type: U_WORD
    state_class: measurement

  - platform: template                     # Inverter Rated Power
    name: "${friendly_name} Rated Power"
    id: inverter_esphome_rated_power
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    lambda: |-
      uint16_t low =  id(reg_20_raw).state;
      uint16_t high =  id(reg_21_raw).state;
      return ( high << 16 | low);
    filters:
      - multiply: 0.1

############################################### GRID ##################################################

  - platform: modbus_controller            # 609 Grid Frequency
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Frequency"
    id: inverter_esphome_grid_frequency
    register_type: holding
    address: 609
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    value_type: U_WORD
    state_class: measurement

  - platform: modbus_controller            # 625 Grid Power
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Power"
    id: inverter_esphome_grid_power
    register_type: holding
    address: 625
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD


  - platform: modbus_controller            # 600 Grid Voltage
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Voltage"
    id: inverter_esphome_grid_voltage
    register_type: holding
    address: 600
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    filters:
      - multiply: 0.1
    value_type: U_WORD 

  - platform: modbus_controller            # 610 Grid Current L1
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Current L1"
    id: inverter_esphome_grid_current_L1
    register_type: holding
    address: 610
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 611 Grid Current L2
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Current L1"
    id: inverter_esphome_grid_current_2
    register_type: holding
    address: 611
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 612 Grid Current L3
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Current L1"
    id: inverter_esphome_grid_current_L3
    register_type: holding
    address: 612
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01          

  - platform: modbus_controller            # 619 Grid CT Power
    modbus_controller_id: inverter
    name: "${friendly_name} Grid CT Power"
    id: inverter_esphome_grid_ct_power
    register_type: holding
    address: 619
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # Grid Power Import only needed if you want to calculate Daily Energy Totals using ESPHome
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Power Import"
    id: inverter_esphome_grid_ct_power_import
    register_type: holding
    address: 619
    unit_of_measurement: "W"
    accuracy_decimals: 0
    internal: true
    device_class: power
    state_class: measurement
    value_type: S_WORD
    lambda: |-
      if (x < 0) return 0; else return x;

  - platform: modbus_controller            # Grid Power Export only needed if you want to calculate Daily Energy Totals using ESPHome
    modbus_controller_id: inverter
    name: "${friendly_name} Grid Power Export"
    register_type: holding
    address: 619
    unit_of_measurement: "W"
    id: inverter_esphome_grid_ct_power_export
    accuracy_decimals: 0
    internal: true
    device_class: power
    state_class: measurement
    value_type: S_WORD
    lambda: |-
      if (x > 0) return 0; else return x *-1;

############################################### LOAD ################################################

  - platform: modbus_controller            # 653 Load Power
    modbus_controller_id: inverter
    name: "${friendly_name} Load Power"
    id: inverter_esphome_load_power
    register_type: holding
    address: 653
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 650 Load L1 Power
    modbus_controller_id: inverter
    name: "${friendly_name} Load L1 Power"
    id: inverter_esphome_load_l1_power
    register_type: holding
    address: 650
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 651 Load L2 Power
    modbus_controller_id: inverter
    name: "${friendly_name} Load L2 Power"
    id: inverter_esphome_load_l2_power
    register_type: holding
    address: 651
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 651 Load L3 Power
    modbus_controller_id: inverter
    name: "${friendly_name} Load L3 Power"
    id: inverter_esphome_load_l3_power
    register_type: holding
    address: 652
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

############################################### SOLAR PV1 #############################################

  - platform: modbus_controller            # 672 PV1 Power
    modbus_controller_id: inverter
    name: "${friendly_name} PV1 Power"
    id: inverter_esphome_pv1_power
    register_type: holding
    address: 672
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: U_WORD

  - platform: modbus_controller            # 676 PV1 Voltage
    modbus_controller_id: inverter
    name: "${friendly_name} PV1 Voltage"
    id: inverter_esphome_pv1_voltage
    register_type: holding
    address: 676
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    value_type: U_WORD

  - platform: modbus_controller            # 677 PV1 Current
    modbus_controller_id: inverter
    name: "${friendly_name} PV1 Current"
    id: inverter_esphome_pv1_current
    register_type: holding
    address: 677
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    filters:
      - multiply: 0.1
    value_type: U_WORD

############################################### SOLAR PV2 #############################################

  - platform: modbus_controller            # 673 PV2 Power
    modbus_controller_id: inverter
    name: "${friendly_name} PV2 Power"
    id: inverter_esphome_pv2_power
    register_type: holding
    address: 673
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: U_WORD

  - platform: modbus_controller            # 678 PV2 Voltage
    modbus_controller_id: inverter
    name: "${friendly_name} PV2 Voltage"
    id: inverter_esphome_pv2_voltage
    register_type: holding
    address: 678
    unit_of_measurement: "V"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage
    state_class: measurement
    value_type: U_WORD

  - platform: modbus_controller            # 679 PV2 Current
    modbus_controller_id: inverter
    name: "${friendly_name} PV2 Current"
    id: inverter_esphome_pv2_current
    register_type: holding
    address: 679
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    filters:
      - multiply: 0.1
    value_type: U_WORD

#################################################### SOLAR PV3 #############################################
#### Uncomment this if you have a third MPPT single phase
    
  #- platform: modbus_controller            # 188 PV3 Power
  #  modbus_controller_id: inverter
  #  name: "${friendly_name} PV3 Power"
  #  id: inverter_esphome_pv3_power
  #  register_type: holding
  #  address: 188
  #  unit_of_measurement: "W"
  #  accuracy_decimals: 0
  #  device_class: power
  #  state_class: measurement
  #  value_type: U_WORD

  #- platform: modbus_controller            # 113 PV3 Voltage
  #  modbus_controller_id: inverter
  #  name: "${friendly_name} PV3 Voltage"
  #  id: inverter_esphome_pv3_voltage
  #  register_type: holding
  #  address: 113
  #  unit_of_measurement: "V"
  #  accuracy_decimals: 1
  #  filters:
  #    - multiply: 0.1
  #  device_class: voltage
  #  state_class: measurement
  #  value_type: U_WORD

  #- platform: modbus_controller            # 114 PV3 Current
  #  modbus_controller_id: inverter
  #  name: "${friendly_name} PV3 Current"
  #  id: inverter_esphome_pv3_current
  #  register_type: holding
  #  address: 114
  #  unit_of_measurement: "A"
  #  accuracy_decimals: 1
  #  device_class: current
  #  state_class: measurement
  #  filters:
  #    - multiply: 0.1
  #  value_type: U_WORD

############################################### SOLAR TOTAL ###########################################
# Choose one below

  - platform: template                     # Sum of PV1 and PV2 to get total PV Power
    name: "${friendly_name} Solar Power"
    unit_of_measurement: "W"
    id: inverter_esphome_pv_total
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(inverter_esphome_pv1_power).state + id(inverter_esphome_pv2_power).state);
    update_interval: 5s
    
  #- platform: template                     # Sum of PV1, PV2 and PV3 to get total PV Power
  #  name: "${friendly_name} Solar Power"
  #  unit_of_measurement: "W"
  #  id: inverter_esphome_pv_total
  #  accuracy_decimals: 0
  #  device_class: power
  #  state_class: measurement
  #  lambda: |-
  #    return (id(inverter_esphome_pv1_power).state + id(inverter_esphome_pv2_power).state + id(inverter_esphome_pv3_power).state);
  #  update_interval: 5s

############################################### OUTPUTS ###############################################

  - platform: modbus_controller            # 667 Aux/Gen Power total
    modbus_controller_id: inverter
    name: "${friendly_name} AUX Power"
    id: inverter_esphome_aux_power
    register_type: holding
    address: 667
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: template                     # Essential Power based on register 175 + 167
    name: "${friendly_name} Essential Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(inverter_esphome_inverter_power).state + id(inverter_esphome_grid_power).state - id(inverter_esphome_aux_power).state);
    update_interval: 5s

 

  - platform: template                     # Nonessential Power 172 - 167
    name: "${friendly_name} Nonessential Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(inverter_esphome_grid_ct_power).state - id(inverter_esphome_grid_power).state);
    update_interval: 5s

 


############################################### ENERGY ################################################

  - platform: modbus_controller            # 514 Day Battery Charge
    modbus_controller_id: inverter
    name: "${friendly_name} Day Battery Charge"
    id: inverter_esphome_day_battery_charge
    register_type: holding
    address: 514
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 515 Day Battery Discharge
    modbus_controller_id: inverter
    name: "${friendly_name} Day Battery Discharge"
    id: inverter_esphome_day_battery_discharge
    register_type: holding
    address: 515
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 516 Total Battery Charge
    modbus_controller_id: inverter
    name: "${friendly_name} Total Battery Charge"
    id: inverter_esphome_total_battery_charge
    register_type: holding
    address: 516
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.1

  - platform: modbus_controller            # 518 Total Battery Discharge
    modbus_controller_id: inverter
    name: "${friendly_name} Total Battery Discharge"
    id: inverter_esphome_total_battery_discharge
    register_type: holding
    address: 518
    unit_of_measurement: "kWh"
    accuracy_decimals: 0
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.1

  - platform: modbus_controller            # 520 Day Grid Import
    modbus_controller_id: inverter
    name: "${friendly_name} Day Grid Import"
    id: inverter_esphome_day_grid_import
    register_type: holding
    address: 520
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 521 Day Grid Export
    modbus_controller_id: inverter
    name: "${friendly_name} Day Grid Export"
    id: inverter_esphome_day_grid_export
    register_type: holding
    address: 77
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 522 Total Grid Import
    modbus_controller_id: inverter
    name: "${friendly_name} Total Grid Import"
    id: inverter_esphome_total_grid_import
    register_type: holding
    address: 522
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 524 Total Grid Export
    modbus_controller_id: inverter
    name: "${friendly_name} Total Grid Export"
    id: inverter_esphome_total_grid_export
    register_type: holding
    address: 524
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 526 Day Load Energy
    modbus_controller_id: inverter
    name: "${friendly_name} Day Load Energy"
    id: inverter_esphome_day_load_energy
    register_type: holding
    address: 526
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.1
    value_type: U_WORD

  - platform: modbus_controller            # 527 Total Load Energy
    modbus_controller_id: inverter
    name: "${friendly_name} Total Load Energy"
    id: inverter_esphome_total_load_energy
    register_type: holding
    address: 527
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 534 Total PV Energy
    modbus_controller_id: inverter
    name: "${friendly_name} Total PV Energy"
    id: inverter_esphome_total_pv_energy
    register_type: holding
    address: 534
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.1
    value_type: U_DWORD_R  

  - platform: modbus_controller            # 529 Day PV Energy
    modbus_controller_id: inverter
    name: "${friendly_name} Day PV Energy"
    id: inverter_esphome_day_pv_energy
    register_type: holding
    address: 529
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.1
    value_type: U_WORD

############################################### OPTIONAL LOCAL ENERGY SENSORS ############################################
##### Calculates daily energy instead of relying on the inverter registers
##### You can comment these out if not needed

  - platform: total_daily_energy           # Day PV Energy
    name: "${friendly_name} Day PV Energy Local"
    power_id: inverter_esphome_pv_total
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    restore: true
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: total_daily_energy           # Day Battery Charge Energy
    name: "${friendly_name} Day Battery Charge Energy Local"
    power_id: inverter_esphome_battery_power_charge
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    restore: true
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: total_daily_energy           # Day Battery DisCharge Energy
    name: "${friendly_name} Day Battery Discharge Energy Local"
    power_id: inverter_esphome_battery_power_discharge
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    restore: true
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: total_daily_energy           # Day Load Energy
    name: "${friendly_name} Day Load Energy Local"
    power_id: inverter_esphome_load_power
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    restore: true
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: total_daily_energy           # Day Grid Import Energy
    name: "${friendly_name} Day Grid Import Energy Local"
    power_id: inverter_esphome_grid_ct_power_import
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    restore: true
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: total_daily_energy           # Day Grid Export Energy
    name: "${friendly_name} Day Grid Export Energy Local"
    power_id: inverter_esphome_grid_ct_power_export
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    restore: true
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

############################################### TEMPERATURE ################################################

  - platform: modbus_controller            # 540 DC Transformer Temperature
    modbus_controller_id: inverter
    name: "${friendly_name} DC Transformer Temperature"
    id: inverter_esphome_dc_transformer_temperature
    register_type: holding
    address: 540
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply:  0.1

  - platform: modbus_controller            # 541 Radiator Temperature
    modbus_controller_id: inverter
    name: "${friendly_name} Radiator Temperature"
    id: inverter_esphome_radiator_temperature
    register_type: holding
    address: 541
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply:  0.1

################################################ READ SETTINGS #############################################

  - platform: modbus_controller            # 148 Prog1 Time
    modbus_controller_id: inverter
    name: "${friendly_name} Prog1 Time"
    id: inverter_esphome_system_mode_time1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 148
    icon: "mdi:clock"

  - platform: modbus_controller            # 149 Prog2 Time
    modbus_controller_id: inverter
    name: "${friendly_name} Prog2 Time"
    id: inverter_esphome_system_mode_time2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 149   
    icon: "mdi:clock"

  - platform: modbus_controller            # 150 Prog3 Time
    modbus_controller_id: inverter
    name: "${friendly_name} Prog3 Time"
    id: inverter_esphome_system_mode_time3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 150
    icon: "mdi:clock"

  - platform: modbus_controller            # 151 Prog4 Time
    modbus_controller_id: inverter
    name: "${friendly_name} Prog4 Time"
    id: inverter_esphome_system_mode_time4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 151
    icon: "mdi:clock"

  - platform: modbus_controller            # 152 Prog5 Time
    modbus_controller_id: inverter
    name: "${friendly_name} Prog5 Time"
    id: inverter_esphome_system_mode_time5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 152
    icon: "mdi:clock"

  - platform: modbus_controller            # 153 Prog6 Time
    modbus_controller_id: inverter
    name: "${friendly_name} Prog6 Time"
    id: inverter_esphome_system_mode_time6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 153
    icon: "mdi:clock"

################################################ SAVE RAW REGISTERS ############################################
 
  - platform: modbus_controller            # 178 Grid Peak Shaving raw register value
    modbus_controller_id: inverter
    id: grid_peak_shaving_raw
    register_type: holding
    address: 178
    value_type: U_WORD
    internal: true


  - platform: modbus_controller            # 172 raw register value
    modbus_controller_id: inverter
    id: reg_274_raw
    register_type: holding
    address: 172
    value_type: U_WORD
    internal: true

  - platform: modbus_controller            # 173 raw register value
    modbus_controller_id: inverter
    id: reg_275_raw
    register_type: holding
    address: 173
    value_type: U_WORD
    internal: true

  - platform: modbus_controller            # 174 raw register value
    modbus_controller_id: inverter
    id: reg_276_raw
    register_type: holding
    address: 174
    value_type: U_WORD
    internal: true

  - platform: modbus_controller            # 175 raw register value
    modbus_controller_id: inverter
    id: reg_277_raw
    register_type: holding
    address: 175
    value_type: U_WORD
    internal: true

  - platform: modbus_controller            # 176 raw register value
    modbus_controller_id: inverter
    id: reg_278_raw
    register_type: holding
    address: 176
    value_type: U_WORD
    internal: true

  - platform: modbus_controller            # 177 raw register value
    modbus_controller_id: inverter
    id: reg_279_raw
    register_type: holding
    address: 177
    value_type: U_WORD
    internal: true

  - platform: modbus_controller            # 20 raw register value
    modbus_controller_id: inverter
    id: reg_20_raw
    register_type: holding
    address: 20
    value_type: U_WORD
    internal: true
    skip_updates: ${settings_skipped_updates}

  - platform: modbus_controller            # 21 raw register value
    modbus_controller_id: inverter
    id: reg_21_raw
    register_type: holding
    address: 21
    value_type: U_WORD
    internal: true
    skip_updates: ${settings_skipped_updates}

################################################ WRITE SETTINGS ############################################

switch:
  - platform: modbus_controller            # 130 Toggle Grid Charge
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Toggle Grid Charge"
    id: inverter_esphome_toggle_grid_charge
    register_type: holding
    address: 130
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 129 Toggle Generator Charge
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Toggle Generator Charge"
    id: inverter_esphome_toggle_generator_charge
    register_type: holding
    address: 129
    bitmask: 1
    icon: "mdi:toggle-switch"

 # - platform: modbus_controller            # 132 Toggle Force Generator
 #   use_write_multiple: true
 #   modbus_controller_id: inverter
 #   name: "${friendly_name} Toggle Force Generator"
 #   id: inverter_esphome_toggle_force_generator
 #   register_type: holding
 #   address: 132
 #   bitmask: 1 
 #   icon: "mdi:toggle-switch"
    
  - platform: modbus_controller            # 145 Toggle Solar Sell
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Toggle Solar sell"
    id: inverter_esphome_toggle_solar_sell
    register_type: holding
    address: 145
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 146 Toggle System Timer
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Toggle System Timer" 
    id: inverter_esphome_toggle_Time_of_Use
    register_type: holding
    address: 146
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 141 Priority Load
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Toggle Priority Load" 
    id: inverter_esphome_toggle_priority_load
    register_type: holding
    address: 141
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 172 Prog1 Charge
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Prog1 Grid Charge"
    id: inverter_esphome_toggle_grid_charge_time1
    register_type: holding
    address: 172
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 173 Prog2 Charge
    modbus_controller_id: inverter
    use_write_multiple: true
    name: "${friendly_name} Prog2 Grid Charge"
    id: inverter_esphome_toggle_grid_charge_time2
    register_type: holding
    address: 173
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 174 Prog3 Charge
    modbus_controller_id: inverter
    use_write_multiple: true
    name: "${friendly_name} Prog3 Grid Charge"
    id: inverter_esphome_toggle_grid_charge_time3
    register_type: holding
    address: 174
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 175 Prog4 Charge
    modbus_controller_id: inverter
    use_write_multiple: true
    name: "${friendly_name} Prog4 Grid Charge"
    id: inverter_esphome_toggle_grid_charge_time4
    register_type: holding
    address: 175
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 176 Prog5 Charge
    modbus_controller_id: inverter
    use_write_multiple: true
    name: "${friendly_name} Prog5 Grid Charge"
    id: inverter_esphome_toggle_grid_charge_time5
    register_type: holding
    address: 176
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller            # 177 Prog6 Charge
    modbus_controller_id: inverter
    use_write_multiple: true
    name: "${friendly_name} Prog6 Grid Charge"
    id: inverter_esphome_toggle_grid_charge_time6
    register_type: holding
    address: 177
    bitmask: 1
    icon: "mdi:toggle-switch"

number:
  - platform: modbus_controller            # 166 Prog1 Capacity
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_soc_time1
    name: "${friendly_name} Prog1 Capacity"
    unit_of_measurement: "%"
    address: 166
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 167 Prog2 Capacity
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_soc_time2
    name: "${friendly_name} Prog2 Capacity"
    unit_of_measurement: "%"
    address: 167
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 168 Prog3 Capacity
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_soc_time3
    name: "${friendly_name} Prog3 Capacity"
    unit_of_measurement: "%"
    address: 168
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 169 Prog4 Capacity
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_soc_time4
    name: "${friendly_name} Prog4 Capacity"
    unit_of_measurement: "%"
    address: 169
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 170 Prog5 Capacity
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_soc_time5
    name: "${friendly_name} Prog5 Capacity"
    unit_of_measurement: "%"
    address: 170
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 171 Prog6 Capacity
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_soc_time6
    name: "${friendly_name} Prog6 Capacity"
    unit_of_measurement: "%"
    address: 171
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 154 Prog1 Power
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_power_time1
    name: "${friendly_name} Prog1 Power"
    unit_of_measurement: "W"
    address: 154
    min_value: 0
    max_value: 10000
    step: 100
    value_type: U_WORD  

  - platform: modbus_controller            # 155 Prog2 Power
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_power_time2
    name: "${friendly_name} Prog2 Power"
    unit_of_measurement: "W"
    address: 155
    min_value: 0
    max_value: 10000
    step: 100
    value_type: U_WORD  

  - platform: modbus_controller            # 156 Prog3 Power
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_power_time3
    name: "${friendly_name} Prog3 Power"
    unit_of_measurement: "W"
    address: 156
    min_value: 0
    max_value: 10000
    step: 100
    value_type: U_WORD  

  - platform: modbus_controller            # 157 Prog4 Power
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_power_time4
    name: "${friendly_name} Prog4 Power"
    unit_of_measurement: "W"
    address: 157
    min_value: 0
    max_value: 10000
    step: 100
    value_type: U_WORD  

  - platform: modbus_controller            # 158 Prog5 Power
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_power_time5
    name: "${friendly_name} Prog5 Power"
    unit_of_measurement: "W"
    address: 158
    min_value: 0
    max_value: 10000
    step: 100
    value_type: U_WORD  

  - platform: modbus_controller            # 159 Prog6 Power
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_set_power_time6
    name: "${friendly_name} Prog6 Power"
    unit_of_measurement: "W"
    address: 159
    min_value: 0
    max_value: 10000
    step: 100
    value_type: U_WORD  


  - platform: modbus_controller            # 128 Grid Charge Battery current
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_grid_charge_bat_current
    name: "${friendly_name} Grid Charge Battery current"
    unit_of_measurement: "A"
    address: 128
    min_value: 0
    max_value: 200
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 108 Battery Max Charge current
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_bat_max_charge_current
    name: "${friendly_name} Battery Max Charge current"
    unit_of_measurement: "A"
    address: 108
    min_value: 0
    max_value: 200
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 109 Battery Max Discharge current
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_bat_max_discharge_current
    name: "${friendly_name} Battery Max Discharge current"
    unit_of_measurement: "A"
    address: 109
    min_value: 0
    max_value: 200
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller            # 143 Max Sell Power
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Max Sell power"
    id: inverter_max_sell_power
    address: 143
    unit_of_measurement: "W"
    min_value: 0
    max_value: 10000
    step: 500
    value_type: U_WORD

################################################ TEXT SENSORS ##################################################

text_sensor:
  - platform: modbus_controller            # 500 Overall State
    modbus_controller_id: inverter
    name: "${friendly_name} Overall State"
    id: inverter_esphome_overall_state
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    raw_encode: HEXBYTES
    address: 500
    lambda: |- 
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("standby");
        case 1: return std::string("selftest");
        case 2: return std::string("normal");
        case 3: return std::string("alarm");
        case 4: return std::string("fault");
        default: return std::string("unknown");
      }

  - platform: template                     # Prog Time 1 Friendly Name
    name: "${friendly_name} Time Slot 1"
    id: inverter_esphome_time_slot_1
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(inverter_esphome_system_mode_time1).state) {
        minutes = static_cast<int>(id(inverter_esphome_system_mode_time1).state) % 100;
        hours = static_cast<int>(id(inverter_esphome_system_mode_time1).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                     # Prog Time 2 Friendly Name
    name: "${friendly_name} Time Slot 2"
    id: inverter_esphome_time_slot_2
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(inverter_esphome_system_mode_time2).state) {
        minutes = static_cast<int>(id(inverter_esphome_system_mode_time2).state) % 100;
        hours = static_cast<int>(id(inverter_esphome_system_mode_time2).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                     # Prog Time 3 Friendly Name
    name: "${friendly_name} Time Slot 3"
    id: inverter_esphome_time_slot_3
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(inverter_esphome_system_mode_time3).state) {
        minutes = static_cast<int>(id(inverter_esphome_system_mode_time3).state) % 100;
        hours = static_cast<int>(id(inverter_esphome_system_mode_time3).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                     # Prog Time 4 Friendly Name
    name: "${friendly_name} Time Slot 4"
    id: inverter_esphome_time_slot_4
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(inverter_esphome_system_mode_time4).state) {
        minutes = static_cast<int>(id(inverter_esphome_system_mode_time4).state) % 100;
        hours = static_cast<int>(id(inverter_esphome_system_mode_time4).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                     # Prog Time 5 Friendly Name
    name: "${friendly_name} Time Slot 5"
    id: inverter_esphome_time_slot_5
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(inverter_esphome_system_mode_time5).state) {
        minutes = static_cast<int>(id(inverter_esphome_system_mode_time5).state) % 100;
        hours = static_cast<int>(id(inverter_esphome_system_mode_time5).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                     # Prog Time 6 Friendly Name
    name: "${friendly_name} Time Slot 6"
    id: inverter_esphome_time_slot_6
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(inverter_esphome_system_mode_time6).state) {
        minutes = static_cast<int>(id(inverter_esphome_system_mode_time6).state) % 100;
        hours = static_cast<int>(id(inverter_esphome_system_mode_time6).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: modbus_controller            # 003-007 Inverter HEX Serial Number
    modbus_controller_id: inverter
    id: inverter_esphome_serial
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    raw_encode: HEXBYTES
    address: 003
    register_count: 5
    response_size: 10
    internal: true


  - platform: template                     # Inverter ASCII Serial Number
    name: "${friendly_name} Serial"
    id: inverter_esphome_ascii_serial
    icon: "mdi:text"
    lambda: |-
      std::string hexData = id(inverter_esphome_serial).state;

      // Convert hex-encoded string to ASCII
      std::string asciiData;
      for (size_t i = 0; i < hexData.length(); i += 2) {
        std::string byte = hexData.substr(i, 2);
        char chr = static_cast<char>(std::stoi(byte, nullptr, 16));
        asciiData.push_back(chr);
      }

      return asciiData;

  - platform: modbus_controller            # 014 Inverter MCU Firmware Version
    modbus_controller_id: inverter
    id: inverter_esphome_MCU_version_13
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    raw_encode: HEXBYTES
    address: 014
    internal: true

  - platform: modbus_controller            # 016 Inverter MCU Firmware Version
    modbus_controller_id: inverter
    id: inverter_esphome_MCU_version_15
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    raw_encode: HEXBYTES
    address: 016
    internal: true

  - platform: template                      # 015-013 Inverter MCU version
    name: "${friendly_name} MCU Version"
    id: inverter_esphome_main_version
    icon: "mdi:text"
    lambda: |-
      return id( inverter_esphome_MCU_version_15).state + "-" + id(inverter_esphome_MCU_version_13).state;

  - platform: modbus_controller             # 018 Inverter LCD Firmware Version
    modbus_controller_id: inverter
    id: inverter_esphome_comm_lcd_firmware_16
    name: "${friendly_name} COMM Version"
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    raw_encode: HEXBYTES
    icon: "mdi:text"
    address: 018

################################################ SELECT SENSORS ################################################

select:
  - platform: modbus_controller            #141 Select Energy Patern
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_select_energy_pattern
    name: "${friendly_name} Energy Pattern"
    address: 141
    value_type: U_WORD
    optionsmap:
      "Battery first": 0
      "Load first": 1   
         
  - platform: modbus_controller            #142 Select Work Mode
    use_write_multiple: true
    modbus_controller_id: inverter
    id: inverter_esphome_select_work_mode
    name: "${friendly_name} Work Mode"
    address: 142
    value_type: U_WORD
    optionsmap:
      "Selling First": 0
      "Zero Export + Limit to Load Only": 1
      "Limited to Home": 2  

  #- platform: modbus_controller            #235 Select Generator Input
  # use_write_multiple: true
  #  modbus_controller_id: inverter
  #  id: inverter_esphome_select_generator_input
  #  name: "${friendly_name} Generator Input"
  #  address: 235
  #  value_type: U_WORD
  #  optionsmap:
  #    "Disable": 0
  #    "Output": 1
  #    "Input": 2    


  - platform: modbus_controller            #172 Select Prog1 Charge Option
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Prog1 Charge Option"
    id: inverter_esphome_select_system_mode_charge_option_time_1
    address: 172
    value_type: U_WORD
    optionsmap:
      "No Grid or Gen": 0
      "Allow Grid": 1
      "Allow Gen": 2
      "Allow Grid & Gen": 3
    lambda: |-
      if ((x & 0x0003) == 0)
        return  std::string("No Grid or Gen");
      if ((x & 0x0003) == 1)
        return  std::string("Allow Grid");
      if ((x & 0x0003) == 2)
        return  std::string("Allow Gen");
      if ((x & 0x0003) == 3)
        return  std::string("Allow Grid & Gen");
      return {};
    write_lambda: |-
      uint16_t unmodified =  id(reg_274_raw).state;
      uint16_t modified = ((unmodified & ~0x0003) | value);
      return modified;

  - platform: modbus_controller            #173  Select Prog2 Charge Option
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Prog2 Charge Option"
    id: inverter_esphome_select_system_mode_charge_option_time_2
    address: 173
    value_type: U_WORD
    optionsmap:
      "No Grid or Gen": 0
      "Allow Grid": 1
      "Allow Gen": 2
      "Allow Grid & Gen": 3
    lambda: |-
      if ((x & 0x0003) == 0)
        return  std::string("No Grid or Gen");
      if ((x & 0x0003) == 1)
        return  std::string("Allow Grid");
      if ((x & 0x0003) == 2)
        return  std::string("Allow Gen");
      if ((x & 0x0003) == 3)
        return  std::string("Allow Grid & Gen");
      return {};
    write_lambda: |-
      uint16_t unmodified =  id(reg_275_raw).state;
      uint16_t modified = ((unmodified & ~0x0003) | value);
      return modified;

  - platform: modbus_controller            #174  Select Prog3 Charge Option
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Prog3 Charge Option"
    id: inverter_esphome_select_system_mode_charge_option_time_3
    address: 174
    value_type: U_WORD
    optionsmap:
      "No Grid or Gen": 0
      "Allow Grid": 1
      "Allow Gen": 2
      "Allow Grid & Gen": 3
    lambda: |-
      if ((x & 0x0003) == 0)
        return  std::string("No Grid or Gen");
      if ((x & 0x0003) == 1)
        return  std::string("Allow Grid");
      if ((x & 0x0003) == 2)
        return  std::string("Allow Gen");
      if ((x & 0x0003) == 3)
        return  std::string("Allow Grid & Gen");
      return {};
    write_lambda: |-
      uint16_t unmodified =  id(reg_276_raw).state;
      uint16_t modified = ((unmodified & ~0x0003) | value);
      return modified;

  - platform: modbus_controller            #175  Select Prog4 Charge Option
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Prog4 Charge Option"
    id: inverter_esphome_select_system_mode_charge_option_time_4
    address: 175
    value_type: U_WORD
    optionsmap:
      "No Grid or Gen": 0
      "Allow Grid": 1
      "Allow Gen": 2
      "Allow Grid & Gen": 3
    lambda: |-
      if ((x & 0x0003) == 0)
        return  std::string("No Grid or Gen");
      if ((x & 0x0003) == 1)
        return  std::string("Allow Grid");
      if ((x & 0x0003) == 2)
        return  std::string("Allow Gen");
      if ((x & 0x0003) == 3)
        return  std::string("Allow Grid & Gen");
      return {};
    write_lambda: |-
      uint16_t unmodified =  id(reg_277_raw).state;
      uint16_t modified = ((unmodified & ~0x0003) | value);
      return modified;

  - platform: modbus_controller            #176  Select Prog5 Charge Option
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Prog5 Charge Option"
    id: inverter_esphome_select_system_mode_charge_option_time_5
    address: 176
    value_type: U_WORD
    optionsmap:
      "No Grid or Gen": 0
      "Allow Grid": 1
      "Allow Gen": 2
      "Allow Grid & Gen": 3
    lambda: |-
      if ((x & 0x0003) == 0)
        return  std::string("No Grid or Gen");
      if ((x & 0x0003) == 1)
        return  std::string("Allow Grid");
      if ((x & 0x0003) == 2)
        return  std::string("Allow Gen");
      if ((x & 0x0003) == 3)
        return  std::string("Allow Grid & Gen");
      return {};
    write_lambda: |-
      uint16_t unmodified =  id(reg_278_raw).state;
      uint16_t modified = ((unmodified & ~0x0003) | value);
      return modified;

  - platform: modbus_controller            #177  Select Prog6 Charge Option
    use_write_multiple: true
    modbus_controller_id: inverter
    name: "${friendly_name} Prog6 Charge Option"
    id: inverter_esphome_select_system_mode_charge_option_time_6
    address: 177
    value_type: U_WORD
    optionsmap:
      "No Grid or Gen": 0
      "Allow Grid": 1
      "Allow Gen": 2
      "Allow Grid & Gen": 3
    lambda: |-
      if ((x & 0x0003) == 0)
        return  std::string("No Grid or Gen");
      if ((x & 0x0003) == 1)
        return  std::string("Allow Grid");
      if ((x & 0x0003) == 2)
        return  std::string("Allow Gen");
      if ((x & 0x0003) == 3)
        return  std::string("Allow Grid & Gen");
      return {};
    write_lambda: |-
      uint16_t unmodified =  id(reg_279_raw).state;
      uint16_t modified = ((unmodified & ~0x0003) | value);
      return modified;
